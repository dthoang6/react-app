if we have a piece of state in our top level component. what is a more elegant way of letting children components work with that state?

40. Context
41. useReducer
42. Context & useReducer
43. What is Immer?
44. Practice useEffect
-------------------------
40. Context: share data through out application.
- instead of passing the props to 2, 3, 4 layer into the component, we can wrap our entire Components into one overall parent of container component and give it a value.
- any nested component can directly consume that value no matter how many layers deep they're nested.

- how to use Context:
    - create DispatchContext.js StateContext.js
    import { createContext } from "react";
    const DispatchContext = createContext();
    export default DispatchContext;

    - wrap all component into DispatchContext and StateContext
    and pass the value into the Context Provider. the value gets added to the Context Provider.
    - So then in Child Component, we're working with the sam piece of Context, so the Child Component has access to that value (anything, a complex object with more than one properties and value...) we added to it.

    - we can pass a value as an object with multiple properties: addFlashMessage, loggedIn.

    - So now, we no longer receive the data as a prop, instead we can access it from context provider by:
        - import the context provider
        - tell which context you want to use

import DispatchContext from "../DispatchContext"
import StateContext from "../StateContext"

const appDispatch = useContext(DispatchContext)
const appState = useContext(StateContext)

-------------------------
41. useReducer: keep all of our logic in one centrally located place.

- useReducer is another way of working with State in React, similar to useState
- why and when we should use useReducer instead of useState?
  - when we have state complex logic

- compare useState vs useReducer: both return an array with two things.
- when we use useState, the function it give us is simple, you call it and then whatever value you pass into it, will become a new state.

const[loggedIn, setLoggedIn] = useState()

const [state, dispatch] = useReducer()

state = a piece of state to access value of state
dispatch = something that you can use to call and update state.

- we can use dispatch to perform different actions depend on the action type like:
dispatch({type: "login"})
dispatch({type: "logout"})
dispatch({type: "flashMessage", value: "Congrats."})

- the idea with dispatch is that you saying what action type you want to do but you are not having to tell how it actually get done.
- ourReducer function will tell how it actually done. how the state data of our application should change for these particular actions.

- whenever you call dispatch, whatever include in the parentheses will passed along into ourReducer function as the action.
- so essentially, we're dispatching a command to make login action or we're dispatching a command to make logout action...

- then we can set the value of Context Provider to dispatch to call an action to update the State. 
- And then within any children component, we can call dispatch to perform an action you want. <DispatchContext.Provider value="dispatch"></DispatchContext.Provider>

- you just say what action you want to dispatch by:
dispatch({type: "flashMessage", value: "Congrats."})
- or you can access the state value: state.

const [state, dispatch] = useReducer(ourReducer, initialState)

function ourReducer(state, action) {
  //standard way to handle is switch
  //how actions actually get done to babysit state.
  ...
}
----
What is userReducer really doing?
const [state, dispatch] = useReducer(ourReducer, initialState)

- when we call useReducer, we give it our initial State, and then we give it a function ourReducer. And in return it give us 2 things. We chose to name those 2 things: state and dispatch to power our entire application by using Context to pass in Component, the overall State object and dispatch. Just those 2 things can allow a potentially infinite number of different actions and different changes to state.


-------------------------
42. Context & useReducer
- we can start to using ourReducer function by dispatching actions from within any component in our application.

- some component only need access to our global state.
- some component only need access only to dispatch. So we would not want those component unnecessary re rendering every time global state changes.

- so we set up by simply have two context provider. one for state, one for dispatch.
- that way, it can be up to each individual component to decide which context they want to consume and watch for changes.

-------------------------
43. What is Immer? sort of sidestep the issue of having to avoid directly mutating state

- we never want to directly mutate or change our state.
- instead, you give react a new value or a new object, and it handles updating your app's state.
- as you begin working with more complex objects, it becomes more work to write code in an immutable fashion.
- we use the package Immer to makes it super easy to work with complex object in an immutable fashion.

- in react, you need to return a new object, you can't directly modify or mutate the existing state object.

return {loggedIn: true, flashMessage: state.flashMessage,...}

- imagine if you had 40 properties, if you only want to update one of the property, you don't need to type all the other 39 properties again if using Immer.
      - just change the thing we want to change
      - Immer will give us a draft where we are free to directly modify and mutate that draft.

      - what immer does, it gives us a copy of state, that we are free to modify and change however we want.
      - and then immer will automatically handle the task of giving that draft object back to React.

-------------------------
44. Practice useEffect
- working with the same piece of data in many different locations is the number one cause of bugs and unexpected problems.
- our goal is that all of our loading and saving from local storage takes place only within our Main.js file.

- the idea here is that we have the user object be available in global app as initialState, so any other component that needs to access this data will no longer need to talk the browser localStorage.

- how should these user values get set into localStorage when user login.
    - when user login using HeaderLoggedOut.js, we can send the server response back to ourReducer through our appDispatch.

  appDispatch({type: "login", data: response.data})

  - in ourReducer function we can say: draft.user = action.data if action type is login.

  - we want to keep ouReducer working with only state.

  - if we need to do something that's considered a side effect like directly changing the browser's dom or in this case working with local storage. we should do it within useEffect.

-------------------------
40. Context
41. useReducer
42. Context & useReducer
43. What is Immer?
44. Practice useEffect